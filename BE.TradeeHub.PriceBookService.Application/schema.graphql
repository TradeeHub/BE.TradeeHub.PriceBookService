schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AdditionalServiceCostEntity {
  name: String!
  description: String
  cost: Decimal!
  taxRateType: TaxRateType
  taxRateId: ID
  taxRate: TaxRateEntity
}

type ImageEntity {
  creator: UserEntity!
  modifier: UserEntity
  url: String!
  s3Key: String!
  name: String!
  byteSize: Long
  contentType: String
  description: String
  createdAt: DateTime!
  createdById: UUID!
  modifiedAt: DateTime
  modifiedById: UUID
}

type LaborRateEntity implements Node {
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  id: ID!
  name: String!
  description: String
  rateType: String
  cost: Decimal!
  price: Decimal!
  serviceIds: [ID!]
  pricingTiers: [PricingTierEntity!]
  userOwnerId: UUID!
  createdAt: DateTime!
  createdById: UUID!
  modifiedAt: DateTime
  modifiedById: UUID
  services: [ServiceEntity!]!
}

type MarkupEntity {
  type: MarkupType!
  value: Decimal!
}

type MaterialEntity implements Node {
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  id: ID!
  parentServiceCategoryId: ID
  name: String!
  description: String
  identifier: String
  markup: MarkupEntity
  taxable: Boolean!
  allowOnlineBooking: Boolean!
  onlinePrice: Decimal
  cost: Decimal
  price: Decimal
  unitType: String!
  images: [ImageEntity!]
  onlineMaterialUrls: [String!]
  pricingTiers: [PricingTierEntity!]
  userOwnerId: UUID!
  createdAt: DateTime!
  createdById: UUID!
  modifiedAt: DateTime
  modifiedById: UUID
  services: ServiceCategoryEntity
}

type Mutation {
  addNewServiceCategory(request: AddNewServiceCategoryRequestInput!): ServiceCategoryEntity! @authorize
  addLaborRate(request: AddLaborRateRequestInput!): LaborRateEntity!
  addService(request: AddServiceRequestInput!): ServiceEntity!
  addServiceBundle(request: AddServiceBundleRequestInput!): ServiceBundleEntity!
  addMaterial(request: AddMaterialRequestInput!): MaterialEntity!
  addTaxRate(request: AddTaxRateRequestInput!): TaxRateEntity!
  addWarranty(request: AddWarrantyRequestInput!): WarrantyEntity!
}

type PricingTierEntity {
  unitRange: RangeOfDecimal!
  cost: Decimal
  price: Decimal!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  serviceCategories: [ServiceCategoryEntity!]! @authorize
  service(id: ID!): ServiceEntity
  serviceCategory(id: ID!): ServiceCategoryEntity
  laborRate(id: ID!): LaborRateEntity
  serviceBundle(id: ID!): ServiceBundleEntity
  material(id: ID!): MaterialEntity
  warranty(id: ID!): WarrantyEntity
  taxRate(id: ID!): TaxRateEntity
}

type RangeOfDecimal {
  overlaps(other: RangeOfDecimalInput): Boolean!
  max: Decimal!
  min: Decimal!
}

type RangeTierUnitEntity {
  quantity: Decimal!
  range: RangeOfDecimal!
}

type ServiceBundleEntity implements Node {
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  id: ID!
  serviceId: ID!
  name: String!
  unit: Decimal
  unitType: String
  serviceCreationType: ServiceCreationType!
  useCalculatedPrice: Boolean!
  duration: ServiceDurationEntity
  cost: Decimal!
  price: Decimal!
  description: String
  images: [ImageEntity!]
  allowOnlineBooking: Boolean!
  serviceCategoryId: ID!
  materials: [ServiceMaterialEntity!]
  laborRates: [ServiceLabourEntity!]
  markup: MarkupEntity
  additionalCosts: [AdditionalServiceCostEntity!]
  warrantyIds: [ID!]
  createdAt: DateTime!
  modifiedAt: DateTime
  service: ServiceEntity
  warranties: [WarrantyEntity!]!
  taxRate: TaxRateEntity
  serviceCategory: ServiceCategoryEntity
}

type ServiceCategoryEntity implements Node {
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  id: ID!
  parentServiceCategoryId: ID
  name: String!
  description: String
  images: [ImageEntity!]
  createdAt: DateTime!
  modifiedAt: DateTime
  parentServiceCategory: ServiceCategoryEntity
  services: [ServiceEntity!]!
  serviceCategories: [ServiceCategoryEntity!]!
}

type ServiceDurationEntity {
  type: DurationType!
  durationRangeFrom: Decimal!
  durationRangeTo: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitEntity!]
}

type ServiceEntity implements Node {
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  id: ID!
  name: String!
  unit: Decimal
  unitType: String
  serviceCreationType: ServiceCreationType!
  useCalculatedPrice: Boolean!
  duration: ServiceDurationEntity
  cost: Decimal!
  price: Decimal!
  description: String
  images: [ImageEntity!]
  allowOnlineBooking: Boolean!
  materials: [ServiceMaterialEntity!]
  laborRates: [ServiceLabourEntity!]
  markup: MarkupEntity
  additionalCosts: [AdditionalServiceCostEntity!]
  createdAt: DateTime!
  modifiedAt: DateTime
  warranties: [WarrantyEntity!]!
  bundles: [ServiceBundleEntity!]!
  taxRate: TaxRateEntity
  serviceCategory: ServiceCategoryEntity
}

type ServiceLabourEntity {
  quantity: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitEntity!]
  laborRate: LaborRateEntity
}

type ServiceMaterialEntity {
  quantity: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitEntity!]
  material: MaterialEntity
}

type TaxRateEntity implements Node {
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  id: ID!
  name: String!
  description: String
  percentageRate: Decimal!
  userOwnerId: UUID!
  createdAt: DateTime!
  createdById: UUID!
  modifiedAt: DateTime
  modifiedById: UUID
}

type UserEntity implements Node {
  id: ID!
}

type WarrantyDurationEntity {
  durationType: WarrantyDurationType!
  duration: Int!
}

type WarrantyEntity implements Node {
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  id: ID!
  serviceIds: [ID!]
  name: String!
  warrantyType: String
  description: String
  terms: String!
  warrantyDuration: WarrantyDurationEntity!
  price: Decimal
  userOwnerId: UUID!
  createdAt: DateTime!
  createdById: UUID!
  modifiedAt: DateTime
  modifiedById: UUID
}

input AddLaborRateRequestInput {
  name: String!
  description: String
  rateType: String
  cost: Decimal!
  price: Decimal!
  serviceIds: [ID!]
  pricingTiers: [PricingTierRequestInput!]
}

input AddMaterialRequestInput {
  name: String!
  parentServiceCategoryId: ID
  description: String
  identifier: String
  markup: MarkupEntityInput
  taxable: Boolean!
  allowOnlineBooking: Boolean!
  onlinePrice: Decimal
  cost: Decimal
  price: Decimal
  unitType: String!
  images: [Upload!]
  onlineMaterialUrls: [String!]
  pricingTiers: [PricingTierEntityInput!]
}

input AddNewServiceCategoryRequestInput {
  parentServiceCategoryId: ID
  name: String!
  description: String
  images: [Upload!]
}

input AddServiceBundleRequestInput {
  serviceId: ID!
  name: String!
  unit: Decimal
  unitType: String
  serviceCreationType: ServiceCreationType!
  useCalculatedPrice: Boolean!
  duration: ServiceDurationRequestInput
  cost: Decimal!
  price: Decimal!
  description: String
  images: [Upload!]
  allowOnlineBooking: Boolean!
  serviceCategoryId: ID!
  materials: [ServiceMaterialRequestInput!]
  laborRates: [ServiceLabourRequestInput!]
  taxRateId: ID!
  markup: MarkupRequestInput
  additionalCosts: [AdditionalServiceCostRequestInput!]
  warrantyIds: [ID!]
}

input AddServiceRequestInput {
  name: String!
  unit: Decimal
  unitType: String
  serviceCreationType: ServiceCreationType!
  useCalculatedPrice: Boolean!
  duration: ServiceDurationRequestInput
  cost: Decimal!
  price: Decimal!
  description: String
  images: [Upload!]
  allowOnlineBooking: Boolean!
  serviceCategoryId: ID!
  materials: [ServiceMaterialRequestInput!]
  laborRates: [ServiceLabourRequestInput!]
  taxRateId: ID!
  markup: MarkupRequestInput
  additionalCosts: [AdditionalServiceCostRequestInput!]
  warrantyIds: [ID!]
}

input AddTaxRateRequestInput {
  name: String!
  description: String
  percentageRate: Decimal!
}

input AddWarrantyRequestInput {
  serviceIds: [ID!]
  name: String!
  warrantyType: String
  description: String
  terms: String!
  warrantyDuration: WarrantyDurationRequestInput!
  price: Decimal
}

input AdditionalServiceCostRequestInput {
  name: String!
  description: String
  cost: Decimal!
  taxRateType: TaxRateType
  taxRateId: ID
}

input MarkupEntityInput {
  type: MarkupType!
  value: Decimal!
}

input MarkupRequestInput {
  type: MarkupType!
  value: Decimal!
}

input PricingTierEntityInput {
  unitRange: RangeOfDecimalInput!
  cost: Decimal
  price: Decimal!
}

input PricingTierRequestInput {
  unitRange: RangeOfDecimalInput!
  cost: Decimal
  price: Decimal!
}

input RangeOfDecimalInput {
  max: Decimal!
  min: Decimal!
}

input RangeTierUnitRequestInput {
  quantity: Decimal!
  range: RangeOfDecimalInput!
}

input ServiceDurationRequestInput {
  type: DurationType!
  durationRangeFrom: Decimal!
  durationRangeTo: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitRequestInput!]
}

input ServiceLabourRequestInput {
  labourRateId: ID!
  quantity: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitRequestInput!]
}

input ServiceMaterialRequestInput {
  materialId: ID!
  quantity: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitRequestInput!]
}

input WarrantyDurationRequestInput {
  durationType: WarrantyDurationType!
  duration: Int!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum DurationType {
  MINUTES
  HOURS
  DAYS
  WEEKS
  MONTHS
}

enum MarkupType {
  FIXED
  PERCENTAGE
}

enum ServiceCreationType {
  FIXED
  DYNAMIC
}

enum TaxRateType {
  INCLUSIVE
  EXCEPT
  SPECIFIC_RATE
}

enum WarrantyDurationType {
  DAYS
  WEEKS
  MONTHS
  YEARS
  LIFETIME
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")

"The `Upload` scalar type represents a file upload."
scalar Upload