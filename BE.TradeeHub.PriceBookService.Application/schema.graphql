schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AdditionalServiceCostEntity {
  name: String!
  description: String
  cost: Decimal!
  taxRate: TaxType
  taxRateId: ID
}

type LaborRateEntity {
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  id: ID!
  name: String!
  description: String
  rateType: String
  cost: Decimal!
  price: Decimal!
  services: [ID!]
  pricingTiers: [PricingTierEntity!]
  userOwnerId: UUID!
  createdAt: DateTime!
  createdBy: UUID!
  modifiedAt: DateTime
  modifiedBy: UUID
}

type MarkupEntity {
  type: MarkupType!
  value: Decimal!
}

type MaterialEntity {
  id: ID!
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  services: [ID!]
  name: String!
  description: String
  identifier: String
  markup: MarkupEntity
  cost: Decimal!
  price: Decimal!
  unitType: String!
  images: [String!]
  onlineMaterialUrls: [String!]
  pricingTiers: [PricingTierEntity!]
  createdAt: DateTime!
  modifiedAt: DateTime
}

type Mutation {
  addNewServiceCategory(request: AddNewServiceCategoryRequestInput!): ServiceCategoryEntity!
  addLaborRate(request: AddLaborRateRequestInput!): LaborRateEntity!
  addService(request: AddServiceRequestInput!): ServiceEntity!
  addServiceBundle(request: AddServiceBundleRequestInput!): ServiceBundleEntity!
  addMaterial(request: AddMaterialRequestInput!): MaterialEntity!
  addTaxRate(request: AddTaxRateRequestInput!): TaxRateEntity!
  addWarranty(request: AddWarrantyRequestInput!): WarrantyEntity!
}

type PricingTierEntity {
  unitRange: RangeOfDecimal!
  cost: Decimal
  price: Decimal!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  serviceCategory(id: ID!): ServiceCategoryEntity
}

type RangeOfDecimal {
  overlaps(other: RangeOfDecimalInput): Boolean!
  max: Decimal!
  min: Decimal!
}

type RangeTierUnitEntity {
  quantity: Decimal!
  range: RangeOfDecimal!
}

type ServiceBundleEntity {
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  id: ID!
  serviceId: ID!
  name: String!
  unit: Decimal
  unitType: String
  serviceCreationType: ServiceCreationType!
  useCalculatedPrice: Boolean!
  duration: ServiceDurationEntity
  cost: Decimal!
  price: Decimal!
  description: String
  images: [String!]
  allowOnlineBooking: Boolean!
  serviceCategory: ID!
  materials: [ServiceMaterialEntity!]
  laborRates: [ServiceLabourEntity!]
  taxRate: ID!
  markup: MarkupEntity
  additionalCosts: [AdditionalServiceCostEntity!]
  warranties: [ID!]
  userOwnerId: UUID!
  createdAt: DateTime!
  createdBy: UUID!
  modifiedAt: DateTime
  modifiedBy: UUID
}

type ServiceCategoryEntity implements Node {
  id: ID!
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  parentServiceCategory: ID
  name: String!
  description: String
  imagesS3Keys: [String!]
  images: [String!]
  serviceCategories: [ID!]
  services: [ID!]
  createdAt: DateTime!
  modifiedAt: DateTime
}

type ServiceDurationEntity {
  type: DurationType!
  durationRangeFrom: Decimal!
  durationRangeTo: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitEntity!]
}

type ServiceEntity {
  id: ID!
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  name: String!
  unit: Decimal
  unitType: String
  serviceCreationType: ServiceCreationType!
  useCalculatedPrice: Boolean!
  duration: ServiceDurationEntity
  cost: Decimal!
  price: Decimal!
  description: String
  images: [String!]
  allowOnlineBooking: Boolean!
  serviceCategory: ID!
  materials: [ServiceMaterialEntity!]
  laborRates: [ServiceLabourEntity!]
  taxRate: ID!
  markup: MarkupEntity
  additionalCosts: [AdditionalServiceCostEntity!]
  warranties: [ID!]
  bundles: [ID!]
  createdAt: DateTime!
  modifiedAt: DateTime
}

type ServiceLabourEntity {
  labourRateId: ID!
  quantity: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitEntity!]
}

type ServiceMaterialEntity {
  materialId: ID!
  quantity: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitEntity!]
}

type TaxRateEntity {
  id: ID!
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  name: String!
  description: String
  percentageRate: Decimal!
  createdAt: DateTime!
  modifiedAt: DateTime
}

type UserEntity {
  id: ID!
}

type WarrantyDurationEntity {
  durationType: WarrantyDurationType!
  duration: Int!
}

type WarrantyEntity {
  id: ID!
  owner: UserEntity!
  creator: UserEntity!
  modifier: UserEntity
  services: [ID!]
  name: String!
  warrantyType: String
  description: String
  terms: String!
  warrantyDuration: WarrantyDurationEntity!
  price: Decimal
  createdAt: DateTime!
  modifiedAt: DateTime
}

input AddLaborRateRequestInput {
  name: String!
  description: String
  rateType: String
  cost: Decimal!
  price: Decimal!
  services: [ID!]
  pricingTiers: [PricingTierRequestInput!]
}

input AddMaterialRequestInput {
  name: String!
  description: String
  identifier: String
  markup: MarkupEntityInput
  cost: Decimal!
  price: Decimal!
  unitType: String!
  images: [String!]
  onlineMaterialUrls: [String!]
  pricingTiers: [PricingTierEntityInput!]
}

input AddNewServiceCategoryRequestInput {
  parentServiceCategory: ID
  name: String!
  description: String
  images: [Upload!]
}

input AddServiceBundleRequestInput {
  serviceId: ID!
  name: String!
  unit: Decimal
  unitType: String
  serviceCreationType: ServiceCreationType!
  useCalculatedPrice: Boolean!
  duration: ServiceDurationRequestInput
  cost: Decimal!
  price: Decimal!
  description: String
  images: [String!]
  allowOnlineBooking: Boolean!
  serviceCategory: ID!
  materials: [ServiceMaterialRequestInput!]
  laborRates: [ServiceLabourRequestInput!]
  taxRate: ID!
  markup: MarkupRequestInput
  additionalCosts: [AdditionalServiceCostRequestInput!]
  warranties: [ID!]
}

input AddServiceRequestInput {
  name: String!
  unit: Decimal
  unitType: String
  serviceCreationType: ServiceCreationType!
  useCalculatedPrice: Boolean!
  duration: ServiceDurationRequestInput
  cost: Decimal!
  price: Decimal!
  description: String
  images: [String!]
  allowOnlineBooking: Boolean!
  serviceCategory: ID!
  materials: [ServiceMaterialRequestInput!]
  laborRates: [ServiceLabourRequestInput!]
  taxRate: ID!
  markup: MarkupRequestInput
  additionalCosts: [AdditionalServiceCostRequestInput!]
  warranties: [ID!]
}

input AddTaxRateRequestInput {
  name: String!
  description: String
  percentageRate: Decimal!
}

input AddWarrantyRequestInput {
  services: [ID!]
  name: String!
  warrantyType: String
  description: String
  terms: String!
  warrantyDuration: WarrantyDurationEntityInput!
  price: Decimal
}

input AdditionalServiceCostRequestInput {
  name: String!
  description: String
  cost: Decimal!
  taxRate: TaxType
  taxRateId: ID
}

input MarkupEntityInput {
  type: MarkupType!
  value: Decimal!
}

input MarkupRequestInput {
  type: MarkupType!
  value: Decimal!
}

input PricingTierEntityInput {
  unitRange: RangeOfDecimalInput!
  cost: Decimal
  price: Decimal!
}

input PricingTierRequestInput {
  unitRange: RangeOfDecimalInput!
  cost: Decimal
  price: Decimal!
}

input RangeOfDecimalInput {
  max: Decimal!
  min: Decimal!
}

input RangeTierUnitRequestInput {
  quantity: Decimal!
  range: RangeOfDecimalInput!
}

input ServiceDurationRequestInput {
  type: DurationType!
  durationRangeFrom: Decimal!
  durationRangeTo: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitRequestInput!]
}

input ServiceLabourRequestInput {
  labourRateId: ID!
  quantity: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitRequestInput!]
}

input ServiceMaterialRequestInput {
  materialId: ID!
  quantity: Decimal
  ratio: Decimal
  ranges: [RangeTierUnitRequestInput!]
}

input WarrantyDurationEntityInput {
  durationType: WarrantyDurationType!
  duration: Int!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum DurationType {
  MINUTES
  HOURS
  DAYS
  WEEKS
  MONTHS
}

enum LaborRateType {
  HOURLY
  DAILY
}

enum MarkupType {
  FIXED
  PERCENTAGE
}

enum ServiceCreationType {
  FIXED
  DYNAMIC
}

enum TaxType {
  INCLUSIVE
  EXCEPT
  SPECIFIC_RATE
}

enum WarrantyDurationType {
  DAYS
  WEEKS
  MONTHS
  YEARS
  LIFETIME
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")

"The `Upload` scalar type represents a file upload."
scalar Upload